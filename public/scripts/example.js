

var CommentBox = React.createClass({
    loadCommentsFromServer: function() {
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            success: function(data) {
                this.setState({data: data});
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    handleCommentSubmit:function(comment){
        var comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.id = Date.now();
        // add the comment to commentlist
        var newComments = comments.concat([comment]);
        // apply the new state
        this.setState({data: newComments});
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment,
            success: function(data){
                // fetch the content from the server
                this.setState({data: data});
                }.bind(this),
            error: function(xhr, status, err) {
                // if it fails to save the content, use the current list
                this.setState({data: comments});
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    getInitialState: function() {
        // called once before rendering the component for the first time
        return {data: []};
    },
    componentDidMount: function() {
        // called once when the component has been rendered by the first time
        this.loadCommentsFromServer();
        setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    },
    render: function() {
        return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
    }
});

var CommentList = React.createClass({
  render: function() {
      var commentNodes = this.props.data.map(function(comment){
            return (<Comment author={comment.author} key={comment.id}>{comment.text}</Comment>);
      });


    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
    getInitialState: function() {
        // se default values
        return {author: '', text: ''};
    },
    handleAuthorChange: function(e) {
        // onFieldChange
        this.setState({author: e.target.value});
    },
    handleTextChange: function(e) {
        this.setState({text: e.target.value});
    },
    handleSubmit:function(e){
        e.preventDefault();
        var author = this.state.author.trim();
        var text = this.state.text.trim();
        if (!text || !author) {
        return;
        }
        // TODO: send request to the server
        this.props.onCommentSubmit({"text":text, "author":author});
        this.setState({author: '', text: ''});
    },
    render: function() {
    return (
        <form className="commentForm"  onSubmit={this.handleSubmit}>
           <input type="text" placeholder="Your name" value={this.state.author} onChange={this.handleAuthorChange} />
           <input type="text" placeholder="Say something..."  value={this.state.text} onChange={this.handleTextChange} />
           <input type="submit" value="Post" />
         </form>
    );
  }
});


var Comment = React.createClass({
    rawMarkup: function() {
        var rawMarkup = marked(this.props.children.toString(), {sanitize: false});
        return { __html: rawMarkup };
    },
  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

ReactDOM.render(
  <CommentBox url="/api/comments" pollInterval={2000}  />,
  document.getElementById('content')
);
